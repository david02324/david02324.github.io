<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://blog.jangdaw.it/</id><title>David's tech blog</title><subtitle>David's tech blog</subtitle> <updated>2024-03-28T02:20:09+09:00</updated> <author> <name>David</name> <uri>https://blog.jangdaw.it/</uri> </author><link rel="self" type="application/atom+xml" href="https://blog.jangdaw.it/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://blog.jangdaw.it/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2024 David </rights> <icon>//assets/img/favicons/favicon.ico</icon> <logo>//assets/img/favicons/favicon-96x96.png</logo> <entry><title>무료 사이드 프로젝트에서 Scalable 하게 프로덕션까지 fly.io 활용하기 A to Z</title><link href="https://blog.jangdaw.it/posts/fly-io/" rel="alternate" type="text/html" title="무료 사이드 프로젝트에서 Scalable 하게 프로덕션까지 fly.io 활용하기 A to Z" /><published>2023-09-26T00:00:00+09:00</published> <updated>2023-10-02T16:13:50+09:00</updated> <id>https://blog.jangdaw.it/posts/fly-io/</id> <content src="https://blog.jangdaw.it/posts/fly-io/" /> <author> <name>David</name> </author> <category term="Infra" /> <summary> fly.io 서론 사이드 프로젝트 혹은 해커톤 등에서 열심히 코드를 작성하고 배포할 때가 되면, 항상 어떤 플랫폼 혹은 서비스를 이용하여 배포하여야 더 경제적인지, 더 나아간다면 장기적으로 관리하기 쉽고 Scale in/out 하기 쉬운지를 고려하게 된다. AWS를 사용하자니 AWS 에서 제공하는 방대한 기능은 사실 거의 필요 없고, 혹여나 잘못된 리소스 관리로 요금 폭탄을 맞을지 두려움에 떨게 된다. 이러한 고민을 한번이라도 해본 개발자라면, 작은 인스턴스에 한에 완전 무료를 제공하는 Heroku 의 이름을 들어봤을 것이다. 그러나 Heroku 가 정책을 변경하면서, 더이상 완전 무료로 본인이 만든 사이드 프로젝트를 배포할 수 없게 되었다. 그 대안책으로 떠오른 PaaS 로 fly.io가 있다.... </summary> </entry> <entry><title>localstack 으로 로컬 환경에서 lambda 개발 및 테스트 환경 구축하기</title><link href="https://blog.jangdaw.it/posts/localstack-and-lambda/" rel="alternate" type="text/html" title="localstack 으로 로컬 환경에서 lambda 개발 및 테스트 환경 구축하기" /><published>2022-09-03T00:00:00+09:00</published> <updated>2024-03-28T02:17:17+09:00</updated> <id>https://blog.jangdaw.it/posts/localstack-and-lambda/</id> <content src="https://blog.jangdaw.it/posts/localstack-and-lambda/" /> <author> <name>David</name> </author> <category term="Infra" /> <category term="AWS" /> <category term="lambda" /> <summary> 서론 개발하다보면 가용성이나 여타 다른 서비스의 영향을 받지 않기 위해 서버리스 운영을 고려하곤 한다. AWS의 lambda 는 standalone 에 비해 상대적으로 개발하기 간편하면서 다른 인프라 의존성을 신경쓸 일이 적고(DB 접근같은 문제는 차치하더라도) 필요에 따라 훨씬 유연하게 개발할 수 있기 때문에 특정 상황에서 많은 장점을 가지고 있다. 람다는 개발하기(정확히는 구현하기) 간편하다는 장점이 있지만 한편으로는 디버깅에 애를 먹곤 한다. 코드에 수정이 가해지면 저장 및 압축 awscli 혹은 웹 콘솔을 통한 배포 awscli를 통한 invoke 혹은 웹 콘솔의 테스트 기능을 사용하여 테스트 를 반복해야 한다. HTTP Request 를 처리하는 람다라면 몰라도 dyna... </summary> </entry> </feed>
